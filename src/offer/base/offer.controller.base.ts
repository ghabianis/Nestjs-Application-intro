/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestMorgan from "nest-morgan";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { OfferService } from "../offer.service";
import { OfferCreateInput } from "./OfferCreateInput";
import { OfferWhereInput } from "./OfferWhereInput";
import { OfferWhereUniqueInput } from "./OfferWhereUniqueInput";
import { OfferFindManyArgs } from "./OfferFindManyArgs";
import { OfferUpdateInput } from "./OfferUpdateInput";
import { Offer } from "./Offer";
import { Post } from "../../post/base/Post";
import { QuestionWhereInput } from "../../question/base/QuestionWhereInput";
import { Question } from "../../question/base/Question";
import { FeedbackWhereInput } from "../../feedback/base/FeedbackWhereInput";
import { Feedback } from "../../feedback/base/Feedback";
import { OffersOnCommunityWhereInput } from "../../offersOnCommunity/base/OffersOnCommunityWhereInput";
import { OffersOnCommunity } from "../../offersOnCommunity/base/OffersOnCommunity";
import { getListOfferDto } from "./getListOffer.dto";
import { OfferFindUniqueArgs } from "./OfferFindUniqueArgs";
import { PublicationCreateInput } from "src/publication/base/PublicationCreateInput";
@swagger.ApiBearerAuth()
export class OfferControllerBase {
  constructor(
    protected readonly service: OfferService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post()
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "create",
    possession: "any",
  })
  @swagger.ApiCreatedResponse({ type: Offer })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: OfferCreateInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Offer> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Offer"} creation is forbidden for roles: ${roles}`
      );
    }
    return await this.service.create({
      data: {
        ...data,

        publication: {
          connect: data.publication,
        },

        contract: data.contract
          ? {
              connect: data.contract,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        place: true,
        renumeration: true,
        offerType: true,
        maxExperience: true,
        candidateMaxNumber: true,

        publication: {
          select: {
            id: true,
          },
        },

        contract: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get()
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: getListOfferDto })
  @swagger.ApiForbiddenResponse()
  @swagger.ApiQuery({
    type: () => OfferFindManyArgs,
    style: "deepObject",
    explode: true,
  })
  async findMany(
    @common.Req() request: Request,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<PaginatedInterface<Offer>> {
    const args = plainToClass(OfferFindManyArgs, request.query);

    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Offer",
    });
    const results = await this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        place: true,
        renumeration: true,
        offerType: true,
        maxExperience: true,
        candidateMaxNumber: true,
        isActive: true,

        publication: {
          select: {
            id: true,
          },
        },

        contract: {
          select: {
            id: true,
          },
        },
      },
    });
    const result = results.paginatedResult.map((result: Offer) =>
      permission.filter(result)
    );
    return { paginatedResult: result, totalCount: results.totalCount };
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "own",
  })
  @swagger.ApiOkResponse({ type: Offer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: OfferWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Offer | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Offer",
    });
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        place: true,
        renumeration: true,
        offerType: true,
        maxExperience: true,
        candidateMaxNumber: true,

        publication: {
          select: {
            id: true,
          },
        },

        contract: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return permission.filter(result);
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "update",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: Offer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: OfferWhereUniqueInput,
    @common.Body()
    data: OfferUpdateInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Offer | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Offer"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          publication: {
            connect: data.publication,
          },

          contract: data.contract
            ? {
                connect: data.contract,
              }
            : undefined,
          questions:
            data.questions && data.questions.length > 0
              ? {
                  upsert: data.questions.map((e) => {
                    return {
                      update: {
                        ...e,
                        questionType: e.questionType
                          ? { connect: e.questionType }
                          : undefined,
                        video: e.video
                          ? {
                              connectOrCreate: {
                                where: { id: e.video.id || "" },
                                create: {
                                  ...e.video,
                                  id: undefined,
                                  publication: e.video.publication
                                    ? { connect: e.video.publication }
                                    : undefined,
                                  category: e.video.category
                                    ? { connect: e.video.category }
                                    : undefined,
                                  entreprise: e.video.entreprise
                                    ? { connect: e.video.entreprise }
                                    : undefined,
                                },
                              },
                            }
                          : undefined,
                      },
                      create: {
                        ...e,
                        questionType: e.questionType
                          ? { connect: e.questionType }
                          : undefined,
                        video: e.video
                          ? {
                              connectOrCreate: {
                                where: { id: e.video.id || "" },
                                create: {
                                  ...e.video,
                                  id: undefined,
                                  publication: e.video.publication
                                    ? { connect: e.video.publication }
                                    : undefined,
                                  category: e.video.category
                                    ? { connect: e.video.category }
                                    : undefined,
                                  entreprise: e.video.entreprise
                                    ? { connect: e.video.entreprise }
                                    : undefined,
                                },
                              },
                            }
                          : undefined,
                      },
                      where: {
                        id: e.id || "",
                      },
                    };
                  }),
                }
              : undefined,
          offersOnCommunities:
            data.offersOnCommunities && data.offersOnCommunities.length > 0
              ? {
                  deleteMany: {
                    offerId: data.id,
                  },
                  createMany: {
                    data: data.offersOnCommunities.map((e) => {
                      return { communityId: e };
                    }),
                  },
                }
              : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          place: true,
          renumeration: true,
          offerType: true,
          maxExperience: true,
          candidateMaxNumber: true,
          isActive: true,
          publication: {
            select: {
              id: true,
            },
          },

          contract: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: Offer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: OfferWhereUniqueInput
  ): Promise<Offer | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          place: true,
          renumeration: true,
          offerType: true,
          maxExperience: true,
          candidateMaxNumber: true,
          isActive: true,

          publication: {
            select: {
              id: true,
            },
          },

          contract: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/questions")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => QuestionWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyQuestions(
    @common.Req() request: Request,
    @common.Param() params: OfferWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Question[]> {
    const query: QuestionWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Question",
    });
    const results = await this.service.findQuestions(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,

        questionType: {
          select: {
            id: true,
          },
        },

        offer: {
          select: {
            id: true,
          },
        },

        video: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/questions")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "update",
    possession: "any",
  })
  async createQuestions(
    @common.Param() params: OfferWhereUniqueInput,
    @common.Body() body: OfferWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      questions: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Offer"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/questions")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "update",
    possession: "any",
  })
  async updateQuestions(
    @common.Param() params: OfferWhereUniqueInput,
    @common.Body() body: OfferWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      questions: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Offer"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/questions")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "update",
    possession: "any",
  })
  async deleteQuestions(
    @common.Param() params: OfferWhereUniqueInput,
    @common.Body() body: OfferWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      questions: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Offer"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/feedbacks")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => FeedbackWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyFeedbacks(
    @common.Req() request: Request,
    @common.Param() params: OfferWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Feedback[]> {
    const query: FeedbackWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Feedback",
    });
    const results = await this.service.findFeedbacks(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        contenu: true,
        statue: true,
        type: true,

        offer: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/feedbacks")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "update",
    possession: "any",
  })
  async createFeedbacks(
    @common.Param() params: OfferWhereUniqueInput,
    @common.Body() body: OfferWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      feedbacks: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Offer"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/feedbacks")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "update",
    possession: "any",
  })
  async updateFeedbacks(
    @common.Param() params: OfferWhereUniqueInput,
    @common.Body() body: OfferWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      feedbacks: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Offer"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/feedbacks")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "update",
    possession: "any",
  })
  async deleteFeedbacks(
    @common.Param() params: OfferWhereUniqueInput,
    @common.Body() body: OfferWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      feedbacks: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Offer"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/offersOnCommunities")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => OffersOnCommunityWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyOffersOnCommunities(
    @common.Req() request: Request,
    @common.Param() params: OfferWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<OffersOnCommunity[]> {
    const query: OffersOnCommunityWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "OffersOnCommunity",
    });
    const results = await this.service.findOffersOnCommunities(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        offer: {
          select: {
            id: true,
          },
        },

        community: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/offersOnCommunities")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "update",
    possession: "any",
  })
  async createOffersOnCommunities(
    @common.Param() params: OfferWhereUniqueInput,
    @common.Body() body: OfferWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      offersOnCommunities: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Offer"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/offersOnCommunities")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "update",
    possession: "any",
  })
  async updateOffersOnCommunities(
    @common.Param() params: OfferWhereUniqueInput,
    @common.Body() body: OfferWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      offersOnCommunities: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Offer"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/offersOnCommunities")
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "update",
    possession: "any",
  })
  async deleteOffersOnCommunities(
    @common.Param() params: OfferWhereUniqueInput,
    @common.Body() body: OfferWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      offersOnCommunities: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Offer"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @swagger.ApiCreatedResponse({ type: Offer })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  @common.Post("duplicate/:id")
  async duplicateOffer(
    @common.Param() parentId: OfferWhereUniqueInput,
    @common.Body() publication: PublicationCreateInput
  ):Promise<Offer>{
    const duplicatedOffer = await this.service.duplicateOffer(parentId, publication);
    return duplicatedOffer
 }
}

