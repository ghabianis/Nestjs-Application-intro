/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";

import {
  Prisma,
  Offer,
  Question,
  Feedback,
  OffersOnCommunity,
  Publication,
  Contract,
} from "@prisma/client";

import { PaginatedInterface } from "../../util/PaginatedInterface";
import { DbService } from "src/dbService/db.service";
import { OfferWhereUniqueInput } from "./OfferWhereUniqueInput";
import { PublicationCreateInput } from "src/publication/base/PublicationCreateInput";

export class OfferServiceBase {
  constructor(protected readonly prisma: DbService) {}

  async count<T extends Prisma.OfferFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OfferFindManyArgs>
  ): Promise<number> {
    return this.prisma.offer.count(args);
  }

  async findMany<T extends Prisma.OfferFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OfferFindManyArgs>
  ): Promise<PaginatedInterface<Offer>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.offer.findMany(args),
      this.prisma.offer.count(),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.OfferFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OfferFindUniqueArgs>
  ): Promise<Offer | null> {
    return this.prisma.offer.findUnique(args);
  }
  async create<T extends Prisma.OfferCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OfferCreateArgs>
  ): Promise<Offer> {
    return this.prisma.offer.create<T>(args);
  }
  async update<T extends Prisma.OfferUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OfferUpdateArgs>
  ): Promise<Offer> {
    return this.prisma.offer.update<T>(args);
  }
  async delete<T extends Prisma.OfferDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OfferDeleteArgs>
  ): Promise<Offer> {
    return this.prisma.offer.delete(args);
  }

  async findQuestions(
    parentId: string,
    args: Prisma.QuestionFindManyArgs
  ): Promise<Question[]> {
    return this.prisma.offer
      .findUnique({
        where: { id: parentId },
      })
      .questions(args);
  }

  async findFeedbacks(
    parentId: string,
    args: Prisma.FeedbackFindManyArgs
  ): Promise<Feedback[]> {
    return this.prisma.offer
      .findUnique({
        where: { id: parentId },
      })
      .feedbacks(args);
  }

  async findOffersOnCommunities(
    parentId: string,
    args: Prisma.OffersOnCommunityFindManyArgs
  ): Promise<OffersOnCommunity[]> {
    return this.prisma.offer
      .findUnique({
        where: { id: parentId },
      })
      .offersOnCommunities(args);
  }

  async getPublication(parentId: string): Promise<Publication | null> {
    return this.prisma.offer
      .findUnique({
        where: { id: parentId },
      })
      .publication();
  }

  async getContract(parentId: string): Promise<Contract | null> {
    return this.prisma.offer
      .findUnique({
        where: { id: parentId },
      })
      .contract();
  }

  async duplicateOffer(
    parentId: OfferWhereUniqueInput,
    publicationInput: PublicationCreateInput
  ): Promise<Offer> {
    const offer = await this.prisma.offer.findUnique({
      where: {
        id: parentId.id,
      },
      select: {
        place: true,
        renumeration: true,
        offerType: true,
        maxExperience: true,
        candidateMaxNumber: true,
        isActive:true,
        contract: {
          select: {
            id: true,
          },
        },
        offersOnCommunities: true,
        questions: {
          select: {
            id: true,
            videoId: true,
          },
        },
      },
    });
    let publication = {
      type: publicationInput.type,
      title: publicationInput.title,
      description: publicationInput.description,
    };
    return await this.prisma.offer.create({
      data: {
        ...offer,
        contract: offer?.contract!
          ? {
              connect: offer.contract,
            }
          : undefined,
        offersOnCommunities:
          offer?.offersOnCommunities && offer.offersOnCommunities.length > 0
            ? {
                createMany: {
                  data: offer.offersOnCommunities.map((e) => {
                    return { communityId: e.communityId };
                  }),
                },
              }
            : undefined,
        questions:
          offer?.questions && offer.questions.length > 0
            ? {
                create: offer.questions.map((e) => {
                  return {
                    video: e.videoId 
                      ? {
                          connect: {id:e.videoId}
                        }
                      : undefined,
                  };
                }),
              }
            : undefined,
        publication: {
          create: { ...publication,
            publicationsOnCommunities : offer?.offersOnCommunities && offer.offersOnCommunities.length > 0
            ? {
                createMany: {
                  data: offer.offersOnCommunities.map((e) => {
                    return { communityId: e.communityId };
                  }),
                },
              }
            : undefined,
            
          },
        },
      },
    });

  }
}