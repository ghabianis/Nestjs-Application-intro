/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { CreateOfferArgs } from "./CreateOfferArgs";
import { UpdateOfferArgs } from "./UpdateOfferArgs";
import { DeleteOfferArgs } from "./DeleteOfferArgs";
import { OfferFindManyArgs } from "./OfferFindManyArgs";
import { OfferFindUniqueArgs } from "./OfferFindUniqueArgs";
import { Offer } from "./Offer";
import { QuestionFindManyArgs } from "../../question/base/QuestionFindManyArgs";
import { Question } from "../../question/base/Question";
import { FeedbackFindManyArgs } from "../../feedback/base/FeedbackFindManyArgs";
import { Feedback } from "../../feedback/base/Feedback";
import { OffersOnCommunityFindManyArgs } from "../../offersOnCommunity/base/OffersOnCommunityFindManyArgs";
import { OffersOnCommunity } from "../../offersOnCommunity/base/OffersOnCommunity";
import { Publication } from "../../publication/base/Publication";
import { Contract } from "../../contract/base/Contract";
import { OfferService } from "../offer.service";

@graphql.Resolver(() => Offer)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class OfferResolverBase {
  constructor(
    protected readonly service: OfferService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "any",
  })
  async _offersMeta(
    @graphql.Args() args: OfferFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Offer])
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "any",
  })
  async offers(
    @graphql.Args() args: OfferFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<PaginatedInterface<Offer>> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Offer",
    });
    const results = await this.service.findMany(args);
    const result = results.paginatedResult.map((result: Offer) =>
      permission.filter(result)
    );
    return { paginatedResult: result, totalCount: results.totalCount };
  }

  @graphql.Query(() => Offer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "own",
  })
  async offer(
    @graphql.Args() args: OfferFindUniqueArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Offer | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Offer",
    });
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.Mutation(() => Offer)
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "create",
    possession: "any",
  })
  async createOffer(
    @graphql.Args() args: CreateOfferArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Offer> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Offer"} creation is forbidden for roles: ${roles}`
      );
    }
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        publication: {
          connect: args.data.publication,
        },

        contract: args.data.contract
          ? {
              connect: args.data.contract,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Offer)
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "update",
    possession: "any",
  })
  async updateOffer(
    @graphql.Args() args: UpdateOfferArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Offer | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Offer",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Offer"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          publication: {
            connect: args.data.publication,
          },

          contract: args.data.contract
            ? {
                connect: args.data.contract,
              }
            : undefined,
            questions:
            args.data.questions && args.data.questions.length > 0
              ? {
                  upsert: args.data.questions.map((e) => {
                    return {
                      update: {
                        ...e,
                        questionType: e.questionType
                          ? { connect: e.questionType }
                          : undefined,
                        video: e.video
                          ? {
                              connectOrCreate: {
                                where: { id: e.video.id || "" },
                                create: {
                                  ...e.video,
                                  id: undefined,
                                  publication: e.video.publication
                                    ? { connect: e.video.publication }
                                    : undefined,
                                  category: e.video.category
                                    ? { connect: e.video.category }
                                    : undefined,
                                  entreprise: e.video.entreprise
                                    ? { connect: e.video.entreprise }
                                    : undefined,
                                },
                              },
                            }
                          : undefined,
                      },
                      create: {
                        ...e,
                        questionType: e.questionType
                          ? { connect: e.questionType }
                          : undefined,
                        video: e.video
                          ? {
                              connectOrCreate: {
                                where: { id: e.video.id || "" },
                                create: {
                                  ...e.video,
                                  id: undefined,
                                  publication: e.video.publication
                                    ? { connect: e.video.publication }
                                    : undefined,
                                  category: e.video.category
                                    ? { connect: e.video.category }
                                    : undefined,
                                  entreprise: e.video.entreprise
                                    ? { connect: e.video.entreprise }
                                    : undefined,
                                },
                              },
                            }
                          : undefined,
                      },
                      where: {
                        id: e.id || "",
                      },
                    };
                  }),
                }
              : undefined,
          offersOnCommunities:
          args.data.offersOnCommunities && args.data.offersOnCommunities.length > 0
              ? {
                  deleteMany: {
                    offerId: args.data.id,
                  },
                  createMany: {
                    data: args.data.offersOnCommunities.map((e) => {
                      return { communityId: e };
                    }),
                  },
                }
              : undefined,
  
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Offer)
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "delete",
    possession: "any",
  })
  async deleteOffer(
    @graphql.Args() args: DeleteOfferArgs
  ): Promise<Offer | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Question])
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "any",
  })
  async questions(
    @graphql.Parent() parent: Offer,
    @graphql.Args() args: QuestionFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Question[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Question",
    });
    const results = await this.service.findQuestions(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [Feedback])
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "any",
  })
  async feedbacks(
    @graphql.Parent() parent: Offer,
    @graphql.Args() args: FeedbackFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Feedback[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Feedback",
    });
    const results = await this.service.findFeedbacks(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [OffersOnCommunity])
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "any",
  })
  async offersOnCommunities(
    @graphql.Parent() parent: Offer,
    @graphql.Args() args: OffersOnCommunityFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<OffersOnCommunity[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "OffersOnCommunity",
    });
    const results = await this.service.findOffersOnCommunities(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => Publication, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "any",
  })
  async publication(
    @graphql.Parent() parent: Offer,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Publication | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Publication",
    });
    const result = await this.service.getPublication(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => Contract, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Offer",
    action: "read",
    possession: "any",
  })
  async contract(
    @graphql.Parent() parent: Offer,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Contract | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Contract",
    });
    const result = await this.service.getContract(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }
}
