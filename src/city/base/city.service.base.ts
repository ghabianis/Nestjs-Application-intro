/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, City } from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { DbService } from "src/dbService/db.service";

export class CityServiceBase {
  constructor(protected readonly prisma: DbService) {}

  async count<T extends Prisma.CityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CityFindManyArgs>
  ): Promise<number> {
    return this.prisma.city.count(args);
  }

  async findMany<T extends Prisma.CityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CityFindManyArgs>
  ): Promise<PaginatedInterface<City>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.city.findMany(args),
      this.prisma.city.count(),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.CityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CityFindUniqueArgs>
  ): Promise<City | null> {
    return this.prisma.city.findUnique(args);
  }
  async create<T extends Prisma.CityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CityCreateArgs>
  ): Promise<City> {
    return this.prisma.city.create<T>(args);
  }
  async update<T extends Prisma.CityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CityUpdateArgs>
  ): Promise<City> {
    return this.prisma.city.update<T>(args);
  }
  async delete<T extends Prisma.CityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CityDeleteArgs>
  ): Promise<City> {
    return this.prisma.city.delete(args);
  }
}
