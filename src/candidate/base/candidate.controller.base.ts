/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestMorgan from "nest-morgan";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { CandidateService } from "../candidate.service";
import { CandidateCreateInput } from "./CandidateCreateInput";
import { CandidateWhereInput } from "./CandidateWhereInput";
import { CandidateWhereUniqueInput } from "./CandidateWhereUniqueInput";
import { CandidateFindManyArgs } from "./CandidateFindManyArgs";
import { CandidateUpdateInput } from "./CandidateUpdateInput";
import { Candidate } from "./Candidate";
import { Post } from "../../post/base/Post";
import { ChatWhereInput } from "../../chat/base/ChatWhereInput";
import { Chat } from "../../chat/base/Chat";
import { ContractsOnCandidateWhereInput } from "../../contractsOnCandidate/base/ContractsOnCandidateWhereInput";
import { ContractsOnCandidate } from "../../contractsOnCandidate/base/ContractsOnCandidate";
import { CandidatesOnChatroomWhereInput } from "../../candidatesOnChatroom/base/CandidatesOnChatroomWhereInput";
import { CandidatesOnChatroom } from "../../candidatesOnChatroom/base/CandidatesOnChatroom";
import { FollowEntrepriseWhereInput } from "../../followEntreprise/base/FollowEntrepriseWhereInput";
import { FollowEntreprise } from "../../followEntreprise/base/FollowEntreprise";
import { ExperienceWhereInput } from "../../experience/base/ExperienceWhereInput";
import { Experience } from "../../experience/base/Experience";
import { CourseWhereInput } from "../../course/base/CourseWhereInput";
import { Course } from "../../course/base/Course";
import { getListCandidateDto } from "./getListCandidate.dto";
import { ContractResolver } from "src/contract/contract.resolver";
@swagger.ApiBearerAuth()
export class CandidateControllerBase {
  constructor(
    protected readonly service: CandidateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post()
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "create",
    possession: "any",
  })
  @swagger.ApiCreatedResponse({ type: Candidate })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: CandidateCreateInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Candidate> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Candidate"} creation is forbidden for roles: ${roles}`
      );
    }
    return await this.service.create({
      data: {
        ...data,

        job: data.job
          ? {
              connect: data.job,
            }
          : undefined,

        user: {
          connect: data.user,
        },
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        activityField: true,
        wantedPost: true,
        experiencesYears: true,
        languages: true,
        tags: true,
        maxSalary: true,
        minSalary: true,
        personalCv: true,
        mediaLink: true,

        job: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get()
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: getListCandidateDto })
  @swagger.ApiForbiddenResponse()
  @swagger.ApiQuery({
    type: () => CandidateFindManyArgs,
    style: "deepObject",
    explode: true,
  })
  async findMany(
    @common.Req() request: Request,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<PaginatedInterface<Candidate>> {
    const args = plainToClass(CandidateFindManyArgs, request.query);

    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Candidate",
    });
    const results = await this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        activityField: true,
        wantedPost: true,
        experiencesYears: true,
        languages: true,
        experiences: true,
        courses: true,
        //contracts: true,
        tags: true,
        maxSalary: true,
        minSalary: true,
        personalCv: true,
        mediaLink: true,

        job: {
          select: {
            id: true,
          },
        },

        contractsOnCandidates: {
          select: {
            id: true,
            contract: true,
          },
        },

        user: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true,
            username: true,
            sex: true,
            kmRadius:true,
            city:true,
            usersOnCommunities: true,
            phone:true,
            photo:true,
          },
        },
      },
    });
    const result = results.paginatedResult.map((result: Candidate) =>
      permission.filter(result)
    );
    return { paginatedResult: result, totalCount: results.totalCount };
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "own",
  })
  @swagger.ApiOkResponse({ type: Candidate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: CandidateWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Candidate | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Candidate",
    });
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        activityField: true,
        wantedPost: true,
        experiencesYears: true,
        languages: true,
        tags: true,
        maxSalary: true,
        minSalary: true,
        personalCv: true,
        mediaLink: true,
        
        contractsOnCandidates: {
          select: {
            id: true,
            contract: true,
          },
        },

        job: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return permission.filter(result);
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: Candidate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body()
    data: CandidateUpdateInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Candidate | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Candidate"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      const user = data.user;
      delete data.user;
      return await this.service.update({
        where: params,
        data: {
          ...data,

          job: data.job
            ? {
                connect: data.job,
              }
            : undefined,

            user: {
              update:{
                  kmRadius :user?.kmRadius,
                  city : user?.city
              }
          },
          experiences:
            data.experiences && data.experiences.length > 0
              ? {
                  createMany: { data: data.experiences },
                }
              : undefined,
          courses:
            data.courses && data.courses.length > 0
              ? {
                  createMany: { data: data.courses },
                }
              : undefined,

        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          activityField: true,
          wantedPost: true,
          experiencesYears: true,
          languages: true,
          experiences: true,
          courses: true,
          tags: true,
          maxSalary: true,
          minSalary: true,
          personalCv: true,
          mediaLink: true,
          job: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: Candidate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<Candidate | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          activityField: true,
          wantedPost: true,
          experiencesYears: true,
          languages: true,
          tags: true,
          maxSalary: true,
          minSalary: true,
          personalCv: true,
          mediaLink: true,

          /* contract: {
            select: {
              id: true,
            },
          }, */

          job: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/chats")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => ChatWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyChats(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Chat[]> {
    const query: ChatWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Chat",
    });
    const results = await this.service.findChats(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        candidate: {
          select: {
            id: true,
          },
        },

        entreprise: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/chats")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async createChats(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      chats: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/chats")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async updateChats(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      chats: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/chats")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async deleteChats(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      chats: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/contractsOnCandidates")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => ContractsOnCandidateWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyContractsOnCandidates(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<ContractsOnCandidate[]> {
    const query: ContractsOnCandidateWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "ContractsOnCandidate",
    });
    const results = await this.service.findContractsOnCandidates(params.id, {
      where: query,
      select: {
        candidate: {
          select: {
            id: true,
          },
        },

        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    console.log("-------------",results)
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/contractsOnCandidates")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async createContractsOnCandidates(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      contractsOnCandidates: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/contractsOnCandidates")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async updateContractsOnCandidates(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      contractsOnCandidates: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/contractsOnCandidates")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async deleteContractsOnCandidates(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      contractsOnCandidates: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/candidatesOnChatrooms")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => CandidatesOnChatroomWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyCandidatesOnChatrooms(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<CandidatesOnChatroom[]> {
    const query: CandidatesOnChatroomWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "CandidatesOnChatroom",
    });
    const results = await this.service.findCandidatesOnChatrooms(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        chatroom: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/candidatesOnChatrooms")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async createCandidatesOnChatrooms(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      candidatesOnChatrooms: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/candidatesOnChatrooms")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async updateCandidatesOnChatrooms(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      candidatesOnChatrooms: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/candidatesOnChatrooms")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async deleteCandidatesOnChatrooms(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      candidatesOnChatrooms: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/followEntreprises")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => FollowEntrepriseWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyFollowEntreprises(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<FollowEntreprise[]> {
    const query: FollowEntrepriseWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "FollowEntreprise",
    });
    const results = await this.service.findFollowEntreprises(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        entreprise: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/followEntreprises")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async createFollowEntreprises(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      followEntreprises: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/followEntreprises")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async updateFollowEntreprises(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      followEntreprises: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/followEntreprises")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async deleteFollowEntreprises(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      followEntreprises: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/experiences")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => ExperienceWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyExperiences(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Experience[]> {
    const query: ExperienceWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Experience",
    });
    const results = await this.service.findExperiences(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        occupiedPosition: true,
        companyName: true,
        startDate: true,
        endDate: true,
        isWorking: true,
        country: true,
        description: true,

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/experiences")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async createExperiences(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      experiences: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/experiences")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async updateExperiences(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      experiences: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/experiences")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async deleteExperiences(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      experiences: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/courses")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => CourseWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyCourses(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Course[]> {
    const query: CourseWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Course",
    });
    const results = await this.service.findCourses(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        centerName: true,
        startDate: true,
        endDate: true,
        isForming: true,
        country: true,
        description: true,

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/courses")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async createCourses(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      courses: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/courses")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async updateCourses(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      courses: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/courses")
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async deleteCourses(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      courses: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Candidate"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
