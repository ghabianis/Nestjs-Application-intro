/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { CreateCandidateArgs } from "./CreateCandidateArgs";
import { UpdateCandidateArgs } from "./UpdateCandidateArgs";
import { DeleteCandidateArgs } from "./DeleteCandidateArgs";
import { CandidateFindManyArgs } from "./CandidateFindManyArgs";
import { CandidateFindUniqueArgs } from "./CandidateFindUniqueArgs";
import { Candidate } from "./Candidate";
import { ChatFindManyArgs } from "../../chat/base/ChatFindManyArgs";
import { Chat } from "../../chat/base/Chat";
import { ContractsOnCandidateFindManyArgs } from "../../contractsOnCandidate/base/ContractsOnCandidateFindManyArgs";
import { ContractsOnCandidate } from "../../contractsOnCandidate/base/ContractsOnCandidate";
import { CandidatesOnChatroomFindManyArgs } from "../../candidatesOnChatroom/base/CandidatesOnChatroomFindManyArgs";
import { CandidatesOnChatroom } from "../../candidatesOnChatroom/base/CandidatesOnChatroom";
import { FollowEntrepriseFindManyArgs } from "../../followEntreprise/base/FollowEntrepriseFindManyArgs";
import { FollowEntreprise } from "../../followEntreprise/base/FollowEntreprise";
import { ExperienceFindManyArgs } from "../../experience/base/ExperienceFindManyArgs";
import { Experience } from "../../experience/base/Experience";
import { CourseFindManyArgs } from "../../course/base/CourseFindManyArgs";
import { Course } from "../../course/base/Course";
import { Contract } from "../../contract/base/Contract";
import { Job } from "../../job/base/Job";
import { User } from "../../user/base/User";
import { CandidateService } from "../candidate.service";
import { ContractFindManyArgs } from "src/contract/base/ContractFindManyArgs";

@graphql.Resolver(() => Candidate)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CandidateResolverBase {
  constructor(
    protected readonly service: CandidateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async _candidatesMeta(
    @graphql.Args() args: CandidateFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Candidate])
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async candidates(
    @graphql.Args() args: CandidateFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<PaginatedInterface<Candidate>> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Candidate",
    });
    const results = await this.service.findMany(args);
    const result = results.paginatedResult.map((result: Candidate) =>
      permission.filter(result)
    );
    return { paginatedResult: result, totalCount: results.totalCount };
  }

  @graphql.Query(() => Candidate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "own",
  })
  async candidate(
    @graphql.Args() args: CandidateFindUniqueArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Candidate | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Candidate",
    });
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.Mutation(() => Candidate)
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "create",
    possession: "any",
  })
  async createCandidate(
    @graphql.Args() args: CreateCandidateArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Candidate> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Candidate"} creation is forbidden for roles: ${roles}`
      );
    }
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

/*         contract: args.data.contract
          ? {
              connect: args.data.contract,
            }
          : undefined, */

        job: args.data.job
          ? {
              connect: args.data.job,
            }
          : undefined,

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @graphql.Mutation(() => Candidate)
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "update",
    possession: "any",
  })
  async updateCandidate(
    @graphql.Args() args: UpdateCandidateArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Candidate | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Candidate",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Candidate"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          job: args.data.job
            ? {
                connect: args.data.job,
              }
            : undefined,

          user: {
            connect: { id: args.data.user?.id },
          },
          experiences: args.data.experiences
            ? {
                createMany: { data: args.data.experiences },
              }
            : undefined,
          courses: args.data.courses
            ? {
                createMany: { data: args.data.courses },
              }
            : undefined
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Candidate)
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "delete",
    possession: "any",
  })
  async deleteCandidate(
    @graphql.Args() args: DeleteCandidateArgs
  ): Promise<Candidate | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Chat])
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async chats(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: ChatFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Chat[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Chat",
    });
    const results = await this.service.findChats(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [CandidatesOnChatroom])
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async candidatesOnChatrooms(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: CandidatesOnChatroomFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<CandidatesOnChatroom[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "CandidatesOnChatroom",
    });
    const results = await this.service.findCandidatesOnChatrooms(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [FollowEntreprise])
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async followEntreprises(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: FollowEntrepriseFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<FollowEntreprise[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "FollowEntreprise",
    });
    const results = await this.service.findFollowEntreprises(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [Experience])
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async experiences(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: ExperienceFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Experience[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Experience",
    });
    const results = await this.service.findExperiences(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [ContractsOnCandidate])
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async contractsOnCandidates(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: ContractsOnCandidateFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<ContractsOnCandidate[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "ContractsOnCandidate",
    });
    const results = await this.service.findContractsOnCandidates(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [Course])
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async courses(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: CourseFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Course[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Course",
    });
    const results = await this.service.findCourses(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

/*   @graphql.ResolveField(() => [Contract])
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async contracts(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: ContractFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Contract[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Contract",
    });
    const results = await this.service.findContracts(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  } */

  /* @graphql.ResolveField(() => Contract, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async contract(
    @graphql.Parent() parent: Candidate,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Contract | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Contract",
    });
    const result = await this.service.getContract(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  } */

  @graphql.ResolveField(() => Job, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async job(
    @graphql.Parent() parent: Candidate,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Job | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Job",
    });
    const result = await this.service.getJob(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async user(
    @graphql.Parent() parent: Candidate,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<User | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "User",
    });
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }
}
