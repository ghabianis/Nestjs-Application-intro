import { CandidateUpdateInput } from "./CandidateUpdateInput";
/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";

import {
  Prisma,
  Candidate,
  Chat,
  CandidatesOnChatroom,
  FollowEntreprise,
  Experience,
  Course,
  ContractsOnCandidate,
  Job,
  User,
} from "@prisma/client";

import { PaginatedInterface } from "../../util/PaginatedInterface";
import { DbService } from "src/dbService/db.service";

export class CandidateServiceBase {
  constructor(protected readonly prisma: DbService,
    protected readonly prismaService: PrismaService) {}

  async count<T extends Prisma.CandidateFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateFindManyArgs>
  ): Promise<number> {
    return this.prisma.candidate.count(args);
  }

  async findMany<T extends Prisma.CandidateFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateFindManyArgs>
  ): Promise<PaginatedInterface<Candidate>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.candidate.findMany(args),
      this.prisma.candidate.count(),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.CandidateFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateFindUniqueArgs>
  ): Promise<Candidate | null> {
    return this.prisma.candidate.findUnique(args);
  }
  async create<T extends Prisma.CandidateCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateCreateArgs>
  ): Promise<Candidate> {
    return this.prismaService.candidate.create<T>(args);
  }
  async update<T extends Prisma.CandidateUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateUpdateArgs>
  ): Promise<Candidate> {
    return this.prismaService.candidate.update<T>(args);
  }

  async updateCandidat<T extends Prisma.CandidateUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateUpdateArgs>  ): Promise<Candidate> {
    
    return await this.prisma.candidate.update<T>(args);
  }

  async delete<T extends Prisma.CandidateDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateDeleteArgs>
  ): Promise<Candidate> {
    return this.prisma.candidate.delete(args);
  }

  async findChats(
    parentId: string,
    args: Prisma.ChatFindManyArgs
  ): Promise<Chat[]> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .chats(args);
  }

  async findCandidatesOnChatrooms(
    parentId: string,
    args: Prisma.CandidatesOnChatroomFindManyArgs
  ): Promise<CandidatesOnChatroom[]> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .candidatesOnChatrooms(args);
  }

  async findFollowEntreprises(
    parentId: string,
    args: Prisma.FollowEntrepriseFindManyArgs
  ): Promise<FollowEntreprise[]> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .followEntreprises(args);
  }

  async findExperiences(
    parentId: string,
    args: Prisma.ExperienceFindManyArgs
  ): Promise<Experience[]> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .experiences(args);
  }

  async findContractsOnCandidates(
    parentId: string,
    args: Prisma.ContractsOnCandidateFindManyArgs
  ): Promise<ContractsOnCandidate[]> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .contractsOnCandidates(args);
  }

  async findCourses(
    parentId: string,
    args: Prisma.CourseFindManyArgs
  ): Promise<Course[]> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .courses(args);
  }

  /* async findContracts(
    parentId: string,
    args: Prisma.ContractFindManyArgs
  ): Promise<Contract[] | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .contracts(args);
  } */

/*   async getContract(parentId: string): Promise<Contract | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .contract();
  } */

  async getJob(parentId: string): Promise<Job | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .job();
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
