/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Question, QuestionType, Offer, Video } from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { DbService } from "src/dbService/db.service";

export class QuestionServiceBase {
  constructor(protected readonly prisma: DbService) {}

  async count<T extends Prisma.QuestionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionFindManyArgs>
  ): Promise<number> {
    return this.prisma.question.count(args);
  }

  async findMany<T extends Prisma.QuestionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionFindManyArgs>
  ): Promise<PaginatedInterface<Question>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.question.findMany(args),
      this.prisma.question.count(),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.QuestionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionFindUniqueArgs>
  ): Promise<Question | null> {
    return this.prisma.question.findUnique(args);
  }
  async create<T extends Prisma.QuestionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionCreateArgs>
  ): Promise<Question> {
    return this.prisma.question.create<T>(args);
  }
  async update<T extends Prisma.QuestionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionUpdateArgs>
  ): Promise<Question> {
    return this.prisma.question.update<T>(args);
  }
  async delete<T extends Prisma.QuestionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionDeleteArgs>
  ): Promise<Question> {
    return this.prisma.question.delete(args);
  }

  async getQuestionType(parentId: string): Promise<QuestionType | null> {
    return this.prisma.question
      .findUnique({
        where: { id: parentId },
      })
      .questionType();
  }

  async getOffer(parentId: string): Promise<Offer | null> {
    return this.prisma.question
      .findUnique({
        where: { id: parentId },
      })
      .offer();
  }

  async getVideo(parentId: string): Promise<Video | null> {
    return this.prisma.question
      .findUnique({
        where: { id: parentId },
      })
      .video();
  }
}
