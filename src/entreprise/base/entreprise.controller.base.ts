/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestMorgan from "nest-morgan";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { EntrepriseService } from "../entreprise.service";
import { EntrepriseCreateInput } from "./EntrepriseCreateInput";
import { EntrepriseWhereInput } from "./EntrepriseWhereInput";
import { EntrepriseWhereUniqueInput } from "./EntrepriseWhereUniqueInput";
import { EntrepriseFindManyArgs } from "./EntrepriseFindManyArgs";
import { EntrepriseUpdateInput } from "./EntrepriseUpdateInput";
import { Entreprise } from "./Entreprise";
import { Post } from "../../post/base/Post";
import { RecruiterWhereInput } from "../../recruiter/base/RecruiterWhereInput";
import { Recruiter } from "../../recruiter/base/Recruiter";
import { ChatroomWhereInput } from "../../chatroom/base/ChatroomWhereInput";
import { Chatroom } from "../../chatroom/base/Chatroom";
import { ChatWhereInput } from "../../chat/base/ChatWhereInput";
import { Chat } from "../../chat/base/Chat";
import { FollowEntrepriseWhereInput } from "../../followEntreprise/base/FollowEntrepriseWhereInput";
import { FollowEntreprise } from "../../followEntreprise/base/FollowEntreprise";
import { SurveyWhereInput } from "../../survey/base/SurveyWhereInput";
import { Survey } from "../../survey/base/Survey";
import { PostWhereInput } from "../../post/base/PostWhereInput";
import { VideoWhereInput } from "../../video/base/VideoWhereInput";
import { Video } from "../../video/base/Video";
import { UsersOnEntrepriseWhereInput } from "../../usersOnEntreprise/base/UsersOnEntrepriseWhereInput";
import { UsersOnEntreprise } from "../../usersOnEntreprise/base/UsersOnEntreprise";
import { EntreprisesOnCommunityWhereInput } from "../../entreprisesOnCommunity/base/EntreprisesOnCommunityWhereInput";
import { EntreprisesOnCommunity } from "../../entreprisesOnCommunity/base/EntreprisesOnCommunity";
import { getListEntrepriseDto } from "./getListEntreprise.dto";
import { Req } from "@nestjs/common";
import { request } from "http";
import { UserData } from "src/auth/gqlUserData.decorator";
import { User } from "src/user/base/User";
@swagger.ApiBearerAuth()
export class EntrepriseControllerBase {
  constructor(
    protected readonly service: EntrepriseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post()
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "create",
    possession: "any",
  })
  @swagger.ApiCreatedResponse({ type: Entreprise })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: EntrepriseCreateInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Entreprise> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Entreprise"} creation is forbidden for roles: ${roles}`
      );
    }
    return await this.service.create({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        owner: true,
        presentationContent: true,
        presentationVideolink: true,
        websiteLink: true,
        linkedinLink: true,
        instagramLink: true,
        departement: true,
        workersNumber: true,
      },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get()
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: getListEntrepriseDto })
  @swagger.ApiForbiddenResponse()
  @swagger.ApiQuery({
    type: () => EntrepriseFindManyArgs,
    style: "deepObject",
    explode: true,
  })
  async findMany(
    @common.Req() request: Request,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<PaginatedInterface<Entreprise>> {
    const args = plainToClass(EntrepriseFindManyArgs, request.query);

    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Entreprise",
    });
    const results = await this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        owner: true,
        presentationContent: true,
        presentationVideolink: true,
        websiteLink: true,
        linkedinLink: true,
        instagramLink: true,
        departement: true,
        workersNumber: true,
      },
    });
    const result = results.paginatedResult.map((result: Entreprise) =>
      permission.filter(result)
    );
    return { paginatedResult: result, totalCount: results.totalCount };
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "own",
  })
  @swagger.ApiOkResponse({ type: Entreprise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[],
    @UserData() user : User
  ): Promise<Entreprise | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Entreprise",
    });
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        owner: true,
        presentationContent: true,
        presentationVideolink: true,
        websiteLink: true,
        linkedinLink: true,
        instagramLink: true,
        departement: true,
        workersNumber: true,
        email : true,
        image : true,
        coverImage:true,
        _count: {
          select: { followEntreprises: true },
        },
        followEntreprises: {
          select: {
            candidate: {
              select:{
                userId:true
              },
            },
            id:true
          },
           where:{
            candidateId : user.candidate?.id
          }  
        },
        entreprisesOnCommunities: {
          select: {
            community: {
              select: {
                name: true,
                id: true,
                _count: {
                  select: {
                    entreprisesOnCommunities: true,
                  },
                },
                entreprisesOnCommunities:{
                  select:{
                    entreprise:{
                      select : {
                        image:true
                      }
                    }
                  },
                  take:5
                }
              },
            },
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return permission.filter(result);
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: Entreprise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body()
    data: EntrepriseUpdateInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Entreprise | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Entreprise"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          owner: true,
          presentationContent: true,
          presentationVideolink: true,
          websiteLink: true,
          linkedinLink: true,
          instagramLink: true,
          departement: true,
          workersNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: Entreprise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: EntrepriseWhereUniqueInput
  ): Promise<Entreprise | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          owner: true,
          presentationContent: true,
          presentationVideolink: true,
          websiteLink: true,
          linkedinLink: true,
          instagramLink: true,
          departement: true,
          workersNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/recruiters")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => RecruiterWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyRecruiters(
    @common.Req() request: Request,
    @common.Param() params: EntrepriseWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Recruiter[]> {
    const query: RecruiterWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Recruiter",
    });
    const results = await this.service.findRecruiters(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        entreprise: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/recruiters")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async createRecruiters(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      recruiters: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/recruiters")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async updateRecruiters(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      recruiters: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/recruiters")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async deleteRecruiters(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      recruiters: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/chatrooms")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => ChatroomWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyChatrooms(
    @common.Req() request: Request,
    @common.Param() params: EntrepriseWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Chatroom[]> {
    const query: ChatroomWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Chatroom",
    });
    const results = await this.service.findChatrooms(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        startDateTime: true,
        endDateTime: true,

        entreprise: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/chatrooms")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async createChatrooms(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      chatrooms: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/chatrooms")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async updateChatrooms(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      chatrooms: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/chatrooms")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async deleteChatrooms(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      chatrooms: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/chats")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => ChatWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyChats(
    @common.Req() request: Request,
    @common.Param() params: EntrepriseWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Chat[]> {
    const query: ChatWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Chat",
    });
    const results = await this.service.findChats(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        candidate: {
          select: {
            id: true,
          },
        },

        entreprise: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/chats")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async createChats(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      chats: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/chats")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async updateChats(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      chats: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/chats")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async deleteChats(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      chats: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/followEntreprises")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => FollowEntrepriseWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyFollowEntreprises(
    @common.Req() request: Request,
    @common.Param() params: EntrepriseWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<FollowEntreprise[]> {
    const query: FollowEntrepriseWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "FollowEntreprise",
    });
    const results = await this.service.findFollowEntreprises(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        entreprise: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/followEntreprises")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async createFollowEntreprises(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      followEntreprises: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/followEntreprises")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async updateFollowEntreprises(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      followEntreprises: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/followEntreprises")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async deleteFollowEntreprises(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      followEntreprises: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/surveys")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => SurveyWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManySurveys(
    @common.Req() request: Request,
    @common.Param() params: EntrepriseWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Survey[]> {
    const query: SurveyWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Survey",
    });
    const results = await this.service.findSurveys(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,

        entreprise: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/surveys")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async createSurveys(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      surveys: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/surveys")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async updateSurveys(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      surveys: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/surveys")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async deleteSurveys(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      surveys: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/posts")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => PostWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyPosts(
    @common.Req() request: Request,
    @common.Param() params: EntrepriseWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Post[]> {
    const query: PostWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Post",
    });
    const results = await this.service.findPosts(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        image: true,

        publication: {
          select: {
            id: true,
          },
        },

        entreprise: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/posts")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async createPosts(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      posts: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/posts")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async updatePosts(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      posts: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/posts")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async deletePosts(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      posts: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/videos")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => VideoWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyVideos(
    @common.Req() request: Request,
    @common.Param() params: EntrepriseWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Video[]> {
    const query: VideoWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Video",
    });
    const results = await this.service.findVideos(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        category: {
          select: {
            id: true,
          },
        },

        publication: {
          select: {
            id: true,
          },
        },

        entreprise: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/videos")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async createVideos(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      videos: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/videos")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async updateVideos(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      videos: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/videos")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async deleteVideos(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      videos: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/usersOnEntreprises")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => UsersOnEntrepriseWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyUsersOnEntreprises(
    @common.Req() request: Request,
    @common.Param() params: EntrepriseWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<UsersOnEntreprise[]> {
    const query: UsersOnEntrepriseWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "UsersOnEntreprise",
    });
    const results = await this.service.findUsersOnEntreprises(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        entreprise: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/usersOnEntreprises")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async createUsersOnEntreprises(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      usersOnEntreprises: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/usersOnEntreprises")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async updateUsersOnEntreprises(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      usersOnEntreprises: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/usersOnEntreprises")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async deleteUsersOnEntreprises(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      usersOnEntreprises: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/entreprisesOnCommunities")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => EntreprisesOnCommunityWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyEntreprisesOnCommunities(
    @common.Req() request: Request,
    @common.Param() params: EntrepriseWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<EntreprisesOnCommunity[]> {
    const query: EntreprisesOnCommunityWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "EntreprisesOnCommunity",
    });
    const results = await this.service.findEntreprisesOnCommunities(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        entreprise: {
          select: {
            id: true,
          },
        },

        community: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/entreprisesOnCommunities")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async createEntreprisesOnCommunities(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      entreprisesOnCommunities: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/entreprisesOnCommunities")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async updateEntreprisesOnCommunities(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      entreprisesOnCommunities: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/entreprisesOnCommunities")
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async deleteEntreprisesOnCommunities(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() body: EntrepriseWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      entreprisesOnCommunities: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Entreprise"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
