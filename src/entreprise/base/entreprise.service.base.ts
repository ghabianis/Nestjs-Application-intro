/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";

import {
  Prisma,
  Entreprise,
  Recruiter,
  Chatroom,
  Chat,
  FollowEntreprise,
  Survey,
  Post,
  Video,
  UsersOnEntreprise,
  EntreprisesOnCommunity,
} from "@prisma/client";

import { PaginatedInterface } from "../../util/PaginatedInterface";
import { DbService } from "src/dbService/db.service";

export class EntrepriseServiceBase {
  constructor(protected readonly prisma: DbService) {}

  async count<T extends Prisma.EntrepriseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EntrepriseFindManyArgs>
  ): Promise<number> {
    return this.prisma.entreprise.count(args);
  }

  async findMany<T extends Prisma.EntrepriseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EntrepriseFindManyArgs>
  ): Promise<PaginatedInterface<Entreprise>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.entreprise.findMany(args),
      this.prisma.entreprise.count(),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.EntrepriseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EntrepriseFindUniqueArgs>
  ): Promise<Entreprise | null> {
    return this.prisma.entreprise.findUnique(args);
  }
  async create<T extends Prisma.EntrepriseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EntrepriseCreateArgs>
  ): Promise<Entreprise> {
    return this.prisma.entreprise.create<T>(args);
  }
  async update<T extends Prisma.EntrepriseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EntrepriseUpdateArgs>
  ): Promise<Entreprise> {
    return this.prisma.entreprise.update<T>(args);
  }
  async delete<T extends Prisma.EntrepriseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EntrepriseDeleteArgs>
  ): Promise<Entreprise> {
    return this.prisma.entreprise.delete(args);
  }

  async findRecruiters(
    parentId: string,
    args: Prisma.RecruiterFindManyArgs
  ): Promise<Recruiter[]> {
    return this.prisma.entreprise
      .findUnique({
        where: { id: parentId },
      })
      .recruiters(args);
  }

  async findChatrooms(
    parentId: string,
    args: Prisma.ChatroomFindManyArgs
  ): Promise<Chatroom[]> {
    return this.prisma.entreprise
      .findUnique({
        where: { id: parentId },
      })
      .chatrooms(args);
  }

  async findChats(
    parentId: string,
    args: Prisma.ChatFindManyArgs
  ): Promise<Chat[]> {
    return this.prisma.entreprise
      .findUnique({
        where: { id: parentId },
      })
      .chats(args);
  }

  async findFollowEntreprises(
    parentId: string,
    args: Prisma.FollowEntrepriseFindManyArgs
  ): Promise<FollowEntreprise[]> {
    return this.prisma.entreprise
      .findUnique({
        where: { id: parentId },
      })
      .followEntreprises(args);
  }

  async findSurveys(
    parentId: string,
    args: Prisma.SurveyFindManyArgs
  ): Promise<Survey[]> {
    return this.prisma.entreprise
      .findUnique({
        where: { id: parentId },
      })
      .surveys(args);
  }

  async findPosts(
    parentId: string,
    args: Prisma.PostFindManyArgs
  ): Promise<Post[]> {
    return this.prisma.entreprise
      .findUnique({
        where: { id: parentId },
      })
      .posts(args);
  }

  async findVideos(
    parentId: string,
    args: Prisma.VideoFindManyArgs
  ): Promise<Video[]> {
    return this.prisma.entreprise
      .findUnique({
        where: { id: parentId },
      })
      .videos(args);
  }

  async findUsersOnEntreprises(
    parentId: string,
    args: Prisma.UsersOnEntrepriseFindManyArgs
  ): Promise<UsersOnEntreprise[]> {
    return this.prisma.entreprise
      .findUnique({
        where: { id: parentId },
      })
      .usersOnEntreprises(args);
  }

  async findEntreprisesOnCommunities(
    parentId: string,
    args: Prisma.EntreprisesOnCommunityFindManyArgs
  ): Promise<EntreprisesOnCommunity[]> {
    return this.prisma.entreprise
      .findUnique({
        where: { id: parentId },
      })
      .entreprisesOnCommunities(args);
  }
}
