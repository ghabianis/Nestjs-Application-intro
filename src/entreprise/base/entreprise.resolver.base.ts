/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { CreateEntrepriseArgs } from "./CreateEntrepriseArgs";
import { UpdateEntrepriseArgs } from "./UpdateEntrepriseArgs";
import { DeleteEntrepriseArgs } from "./DeleteEntrepriseArgs";
import { EntrepriseFindManyArgs } from "./EntrepriseFindManyArgs";
import { EntrepriseFindUniqueArgs } from "./EntrepriseFindUniqueArgs";
import { Entreprise } from "./Entreprise";
import { RecruiterFindManyArgs } from "../../recruiter/base/RecruiterFindManyArgs";
import { Recruiter } from "../../recruiter/base/Recruiter";
import { ChatroomFindManyArgs } from "../../chatroom/base/ChatroomFindManyArgs";
import { Chatroom } from "../../chatroom/base/Chatroom";
import { ChatFindManyArgs } from "../../chat/base/ChatFindManyArgs";
import { Chat } from "../../chat/base/Chat";
import { FollowEntrepriseFindManyArgs } from "../../followEntreprise/base/FollowEntrepriseFindManyArgs";
import { FollowEntreprise } from "../../followEntreprise/base/FollowEntreprise";
import { SurveyFindManyArgs } from "../../survey/base/SurveyFindManyArgs";
import { Survey } from "../../survey/base/Survey";
import { PostFindManyArgs } from "../../post/base/PostFindManyArgs";
import { Post } from "../../post/base/Post";
import { VideoFindManyArgs } from "../../video/base/VideoFindManyArgs";
import { Video } from "../../video/base/Video";
import { UsersOnEntrepriseFindManyArgs } from "../../usersOnEntreprise/base/UsersOnEntrepriseFindManyArgs";
import { UsersOnEntreprise } from "../../usersOnEntreprise/base/UsersOnEntreprise";
import { EntreprisesOnCommunityFindManyArgs } from "../../entreprisesOnCommunity/base/EntreprisesOnCommunityFindManyArgs";
import { EntreprisesOnCommunity } from "../../entreprisesOnCommunity/base/EntreprisesOnCommunity";
import { EntrepriseService } from "../entreprise.service";

@graphql.Resolver(() => Entreprise)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class EntrepriseResolverBase {
  constructor(
    protected readonly service: EntrepriseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  async _entreprisesMeta(
    @graphql.Args() args: EntrepriseFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Entreprise])
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  async entreprises(
    @graphql.Args() args: EntrepriseFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<PaginatedInterface<Entreprise>> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Entreprise",
    });
    const results = await this.service.findMany(args);
    const result = results.paginatedResult.map((result: Entreprise) =>
      permission.filter(result)
    );
    return { paginatedResult: result, totalCount: results.totalCount };
  }

  @graphql.Query(() => Entreprise, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "own",
  })
  async entreprise(
    @graphql.Args() args: EntrepriseFindUniqueArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Entreprise | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Entreprise",
    });
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.Mutation(() => Entreprise)
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "create",
    possession: "any",
  })
  async createEntreprise(
    @graphql.Args() args: CreateEntrepriseArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Entreprise> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Entreprise"} creation is forbidden for roles: ${roles}`
      );
    }
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Entreprise)
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "update",
    possession: "any",
  })
  async updateEntreprise(
    @graphql.Args() args: UpdateEntrepriseArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Entreprise | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Entreprise",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Entreprise"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Entreprise)
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "delete",
    possession: "any",
  })
  async deleteEntreprise(
    @graphql.Args() args: DeleteEntrepriseArgs
  ): Promise<Entreprise | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Recruiter])
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  async recruiters(
    @graphql.Parent() parent: Entreprise,
    @graphql.Args() args: RecruiterFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Recruiter[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Recruiter",
    });
    const results = await this.service.findRecruiters(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [Chatroom])
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  async chatrooms(
    @graphql.Parent() parent: Entreprise,
    @graphql.Args() args: ChatroomFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Chatroom[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Chatroom",
    });
    const results = await this.service.findChatrooms(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [Chat])
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  async chats(
    @graphql.Parent() parent: Entreprise,
    @graphql.Args() args: ChatFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Chat[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Chat",
    });
    const results = await this.service.findChats(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [FollowEntreprise])
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  async followEntreprises(
    @graphql.Parent() parent: Entreprise,
    @graphql.Args() args: FollowEntrepriseFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<FollowEntreprise[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "FollowEntreprise",
    });
    const results = await this.service.findFollowEntreprises(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [Survey])
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  async surveys(
    @graphql.Parent() parent: Entreprise,
    @graphql.Args() args: SurveyFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Survey[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Survey",
    });
    const results = await this.service.findSurveys(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [Post])
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  async posts(
    @graphql.Parent() parent: Entreprise,
    @graphql.Args() args: PostFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Post[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Post",
    });
    const results = await this.service.findPosts(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [Video])
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  async videos(
    @graphql.Parent() parent: Entreprise,
    @graphql.Args() args: VideoFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Video[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Video",
    });
    const results = await this.service.findVideos(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [UsersOnEntreprise])
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  async usersOnEntreprises(
    @graphql.Parent() parent: Entreprise,
    @graphql.Args() args: UsersOnEntrepriseFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<UsersOnEntreprise[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "UsersOnEntreprise",
    });
    const results = await this.service.findUsersOnEntreprises(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [EntreprisesOnCommunity])
  @nestAccessControl.UseRoles({
    resource: "Entreprise",
    action: "read",
    possession: "any",
  })
  async entreprisesOnCommunities(
    @graphql.Parent() parent: Entreprise,
    @graphql.Args() args: EntreprisesOnCommunityFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<EntreprisesOnCommunity[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "EntreprisesOnCommunity",
    });
    const results = await this.service.findEntreprisesOnCommunities(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }
}
