/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { CreateCommunityArgs } from "./CreateCommunityArgs";
import { UpdateCommunityArgs } from "./UpdateCommunityArgs";
import { DeleteCommunityArgs } from "./DeleteCommunityArgs";
import { CommunityFindManyArgs } from "./CommunityFindManyArgs";
import { CommunityFindUniqueArgs } from "./CommunityFindUniqueArgs";
import { Community } from "./Community";
import { OffersOnCommunityFindManyArgs } from "../../offersOnCommunity/base/OffersOnCommunityFindManyArgs";
import { OffersOnCommunity } from "../../offersOnCommunity/base/OffersOnCommunity";
import { PublicationsOnCommunityFindManyArgs } from "../../publicationsOnCommunity/base/PublicationsOnCommunityFindManyArgs";
import { PublicationsOnCommunity } from "../../publicationsOnCommunity/base/PublicationsOnCommunity";
import { UsersOnCommunityFindManyArgs } from "../../usersOnCommunity/base/UsersOnCommunityFindManyArgs";
import { UsersOnCommunity } from "../../usersOnCommunity/base/UsersOnCommunity";
import { EntreprisesOnCommunityFindManyArgs } from "../../entreprisesOnCommunity/base/EntreprisesOnCommunityFindManyArgs";
import { EntreprisesOnCommunity } from "../../entreprisesOnCommunity/base/EntreprisesOnCommunity";
import { CommunityService } from "../community.service";

@graphql.Resolver(() => Community)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CommunityResolverBase {
  constructor(
    protected readonly service: CommunityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "read",
    possession: "any",
  })
  async _communitiesMeta(
    @graphql.Args() args: CommunityFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Community])
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "read",
    possession: "any",
  })
  async communities(
    @graphql.Args() args: CommunityFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<PaginatedInterface<Community>> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Community",
    });
    const results = await this.service.findMany(args);
    const result = results.paginatedResult.map((result: Community) =>
      permission.filter(result)
    );
    return { paginatedResult: result, totalCount: results.totalCount };
  }

  @graphql.Query(() => Community, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "read",
    possession: "own",
  })
  async community(
    @graphql.Args() args: CommunityFindUniqueArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Community | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Community",
    });
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.Mutation(() => Community)
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "create",
    possession: "any",
  })
  async createCommunity(
    @graphql.Args() args: CreateCommunityArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Community> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Community",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Community"} creation is forbidden for roles: ${roles}`
      );
    }
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Community)
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "update",
    possession: "any",
  })
  async updateCommunity(
    @graphql.Args() args: UpdateCommunityArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Community | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Community",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Community"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Community)
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "delete",
    possession: "any",
  })
  async deleteCommunity(
    @graphql.Args() args: DeleteCommunityArgs
  ): Promise<Community | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [OffersOnCommunity])
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "read",
    possession: "any",
  })
  async offersOnCommunities(
    @graphql.Parent() parent: Community,
    @graphql.Args() args: OffersOnCommunityFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<OffersOnCommunity[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "OffersOnCommunity",
    });
    const results = await this.service.findOffersOnCommunities(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [PublicationsOnCommunity])
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "read",
    possession: "any",
  })
  async publicationsOnCommunities(
    @graphql.Parent() parent: Community,
    @graphql.Args() args: PublicationsOnCommunityFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<PublicationsOnCommunity[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "PublicationsOnCommunity",
    });
    const results = await this.service.findPublicationsOnCommunities(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [UsersOnCommunity])
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "read",
    possession: "any",
  })
  async usersOnCommunities(
    @graphql.Parent() parent: Community,
    @graphql.Args() args: UsersOnCommunityFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<UsersOnCommunity[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "UsersOnCommunity",
    });
    const results = await this.service.findUsersOnCommunities(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [EntreprisesOnCommunity])
  @nestAccessControl.UseRoles({
    resource: "Community",
    action: "read",
    possession: "any",
  })
  async entreprisesOnCommunities(
    @graphql.Parent() parent: Community,
    @graphql.Args() args: EntreprisesOnCommunityFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<EntreprisesOnCommunity[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "EntreprisesOnCommunity",
    });
    const results = await this.service.findEntreprisesOnCommunities(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }
}
