/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import {
  Prisma,
  CandidatesOnChatroom,
  Chatroom,
  Candidate,
} from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { DbService } from "src/dbService/db.service";

export class CandidatesOnChatroomServiceBase {
  constructor(protected readonly prisma: DbService) {}

  async count<T extends Prisma.CandidatesOnChatroomFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidatesOnChatroomFindManyArgs>
  ): Promise<number> {
    return this.prisma.candidatesOnChatroom.count(args);
  }

  async findMany<T extends Prisma.CandidatesOnChatroomFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidatesOnChatroomFindManyArgs>
  ): Promise<PaginatedInterface<CandidatesOnChatroom>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.candidatesOnChatroom.findMany(args),
      this.prisma.candidatesOnChatroom.count(),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.CandidatesOnChatroomFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidatesOnChatroomFindUniqueArgs>
  ): Promise<CandidatesOnChatroom | null> {
    return this.prisma.candidatesOnChatroom.findUnique(args);
  }
  async create<T extends Prisma.CandidatesOnChatroomCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidatesOnChatroomCreateArgs>
  ): Promise<CandidatesOnChatroom> {
    return this.prisma.candidatesOnChatroom.create<T>(args);
  }
  async update<T extends Prisma.CandidatesOnChatroomUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidatesOnChatroomUpdateArgs>
  ): Promise<CandidatesOnChatroom> {
    return this.prisma.candidatesOnChatroom.update<T>(args);
  }
  async delete<T extends Prisma.CandidatesOnChatroomDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidatesOnChatroomDeleteArgs>
  ): Promise<CandidatesOnChatroom> {
    return this.prisma.candidatesOnChatroom.delete(args);
  }

  async getChatroom(parentId: string): Promise<Chatroom | null> {
    return this.prisma.candidatesOnChatroom
      .findUnique({
        where: { id: parentId },
      })
      .chatroom();
  }

  async getCandidate(parentId: string): Promise<Candidate | null> {
    return this.prisma.candidatesOnChatroom
      .findUnique({
        where: { id: parentId },
      })
      .candidate();
  }
}
