/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import {
  Prisma,
  Video,
  Question,
  Category,
  Publication,
  Entreprise,
} from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { DbService } from "src/dbService/db.service";

export class VideoServiceBase {
  constructor(protected readonly prisma: DbService) {}

  async count<T extends Prisma.VideoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoFindManyArgs>
  ): Promise<number> {
    return this.prisma.video.count(args);
  }

  async findMany<T extends Prisma.VideoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoFindManyArgs>
  ): Promise<PaginatedInterface<Video>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.video.findMany(args),
      this.prisma.video.count(),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.VideoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoFindUniqueArgs>
  ): Promise<Video | null> {
    return this.prisma.video.findUnique(args);
  }
  async create<T extends Prisma.VideoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoCreateArgs>
  ): Promise<Video> {
    return this.prisma.video.create<T>(args);
  }
  async update<T extends Prisma.VideoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoUpdateArgs>
  ): Promise<Video> {
    return this.prisma.video.update<T>(args);
  }
  async delete<T extends Prisma.VideoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoUpdateArgs>
  ): Promise<Video> {
    return this.prisma.video.update(args);
  }

  async findQuestions(
    parentId: string,
    args: Prisma.QuestionFindManyArgs
  ): Promise<Question[]> {
    return this.prisma.video
      .findUnique({
        where: { id: parentId },
      })
      .questions(args);
  }

  async getCategory(parentId: string): Promise<Category | null> {
    return this.prisma.video
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getPublication(parentId: string): Promise<Publication | null> {
    return this.prisma.video
      .findUnique({
        where: { id: parentId },
      })
      .publication();
  }

  async getEntreprise(parentId: string): Promise<Entreprise | null> {
    return this.prisma.video
      .findUnique({
        where: { id: parentId },
      })
      .entreprise();
  }
}
