/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { CreateContractArgs } from "./CreateContractArgs";
import { UpdateContractArgs } from "./UpdateContractArgs";
import { DeleteContractArgs } from "./DeleteContractArgs";
import { ContractFindManyArgs } from "./ContractFindManyArgs";
import { ContractFindUniqueArgs } from "./ContractFindUniqueArgs";
import { Contract } from "./Contract";
import { ContractsOnCandidateFindManyArgs } from "../../contractsOnCandidate/base/ContractsOnCandidateFindManyArgs";
import { ContractsOnCandidate } from "../../contractsOnCandidate/base/ContractsOnCandidate";
import { CandidateFindManyArgs } from "../../candidate/base/CandidateFindManyArgs";
import { Candidate } from "../../candidate/base/Candidate";
import { OfferFindManyArgs } from "../../offer/base/OfferFindManyArgs";
import { Offer } from "../../offer/base/Offer";
import { ContractService } from "../contract.service";

@graphql.Resolver(() => Contract)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ContractResolverBase {
  constructor(
    protected readonly service: ContractService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async _contractsMeta(
    @graphql.Args() args: ContractFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Contract])
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async contracts(
    @graphql.Args() args: ContractFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<PaginatedInterface<Contract>> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Contract",
    });
    const results = await this.service.findMany(args);
    const result = results.paginatedResult.map((result: Contract) =>
      permission.filter(result)
    );
    return { paginatedResult: result, totalCount: results.totalCount };
  }

  @graphql.Query(() => Contract, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "own",
  })
  async contract(
    @graphql.Args() args: ContractFindUniqueArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Contract | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Contract",
    });
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.Mutation(() => Contract)
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "create",
    possession: "any",
  })
  async createContract(
    @graphql.Args() args: CreateContractArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Contract> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Contract",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Contract"} creation is forbidden for roles: ${roles}`
      );
    }
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Contract)
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "update",
    possession: "any",
  })
  async updateContract(
    @graphql.Args() args: UpdateContractArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Contract | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Contract",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Contract"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Contract)
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "delete",
    possession: "any",
  })
  async deleteContract(
    @graphql.Args() args: DeleteContractArgs
  ): Promise<Contract | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

/*   @graphql.ResolveField(() => [Candidate])
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async candidates(
    @graphql.Parent() parent: Contract,
    @graphql.Args() args: CandidateFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Candidate[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Candidate",
    });
    const results = await this.service.findCandidates(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  } */

  @graphql.ResolveField(() => [ContractsOnCandidate])
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async contractsOnCandidates(
    @graphql.Parent() parent: Contract,
    @graphql.Args() args: ContractsOnCandidateFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<ContractsOnCandidate[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "ContractsOnCandidate",
    });
    const results = await this.service.findContractsOnCandidates(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }
  
  @graphql.ResolveField(() => [Offer])
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async offers(
    @graphql.Parent() parent: Contract,
    @graphql.Args() args: OfferFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Offer[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Offer",
    });
    const results = await this.service.findOffers(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }
}
