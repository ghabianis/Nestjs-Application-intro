/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Contract, ContractsOnCandidate, Offer } from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { DbService } from "src/dbService/db.service";

export class ContractServiceBase {
  constructor(protected readonly prisma: DbService) {}

  async count<T extends Prisma.ContractFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContractFindManyArgs>
  ): Promise<number> {
    return this.prisma.contract.count(args);
  }

  async findMany<T extends Prisma.ContractFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContractFindManyArgs>
  ): Promise<PaginatedInterface<Contract>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.contract.findMany(args),
      this.prisma.contract.count(),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.ContractFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContractFindUniqueArgs>
  ): Promise<Contract | null> {
    return this.prisma.contract.findUnique(args);
  }
  async create<T extends Prisma.ContractCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContractCreateArgs>
  ): Promise<Contract> {
    return this.prisma.contract.create<T>(args);
  }
  async update<T extends Prisma.ContractUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContractUpdateArgs>
  ): Promise<Contract> {
    return this.prisma.contract.update<T>(args);
  }
  async delete<T extends Prisma.ContractDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContractDeleteArgs>
  ): Promise<Contract> {
    return this.prisma.contract.delete(args);
  }

  async findContractsOnCandidates(
    parentId: string,
    args: Prisma.ContractsOnCandidateFindManyArgs
  ): Promise<ContractsOnCandidate[]> {
    return this.prisma.contract
      .findUnique({
        where: { id: parentId },
      })
      .contractsOnCandidates(args);
  }


  async findOffers(
    parentId: string,
    args: Prisma.OfferFindManyArgs
  ): Promise<Offer[]> {
    return this.prisma.contract
      .findUnique({
        where: { id: parentId },
      })
      .offers(args);
  }
}
