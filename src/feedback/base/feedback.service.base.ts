/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Feedback, Offer, User } from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { DbService } from "src/dbService/db.service";

export class FeedbackServiceBase {
  constructor(protected readonly prisma: DbService) {}

  async count<T extends Prisma.FeedbackFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeedbackFindManyArgs>
  ): Promise<number> {
    return this.prisma.feedback.count(args);
  }

  async findMany<T extends Prisma.FeedbackFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeedbackFindManyArgs>
  ): Promise<PaginatedInterface<Feedback>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.feedback.findMany(args),
      this.prisma.feedback.count(),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.FeedbackFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeedbackFindUniqueArgs>
  ): Promise<Feedback | null> {
    return this.prisma.feedback.findUnique(args);
  }
  async create<T extends Prisma.FeedbackCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeedbackCreateArgs>
  ): Promise<Feedback> {
    return this.prisma.feedback.create<T>(args);
  }
  async update<T extends Prisma.FeedbackUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeedbackUpdateArgs>
  ): Promise<Feedback> {
    return this.prisma.feedback.update<T>(args);
  }
  async delete<T extends Prisma.FeedbackDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeedbackDeleteArgs>
  ): Promise<Feedback> {
    return this.prisma.feedback.delete(args);
  }

  async getOffer(parentId: string): Promise<Offer | null> {
    return this.prisma.feedback
      .findUnique({
        where: { id: parentId },
      })
      .offer();
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.feedback
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
