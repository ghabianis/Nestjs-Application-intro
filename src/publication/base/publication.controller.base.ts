/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestMorgan from "nest-morgan";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { PublicationService } from "../publication.service";
import { PublicationCreateInput } from "./PublicationCreateInput";
import { PublicationWhereInput } from "./PublicationWhereInput";
import { PublicationWhereUniqueInput } from "./PublicationWhereUniqueInput";
import { PublicationFindManyArgs } from "./PublicationFindManyArgs";
import { PublicationUpdateInput } from "./PublicationUpdateInput";
import { Publication } from "./Publication";
import { Post } from "../../post/base/Post";
import { PublicationsOnCommunityWhereInput } from "../../publicationsOnCommunity/base/PublicationsOnCommunityWhereInput";
import { PublicationsOnCommunity } from "../../publicationsOnCommunity/base/PublicationsOnCommunity";
import { SocialinterractionWhereInput } from "../../socialinterraction/base/SocialinterractionWhereInput";
import { Socialinterraction } from "../../socialinterraction/base/Socialinterraction";
import { getListPublicationDto } from "./getListPublication.dto";
@swagger.ApiBearerAuth()
export class PublicationControllerBase {
  constructor(
    protected readonly service: PublicationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post()
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "create",
    possession: "any",
  })
  @swagger.ApiCreatedResponse({ type: Publication })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: PublicationCreateInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Publication> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Publication",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Publication"} creation is forbidden for roles: ${roles}`
      );
    }
    return await this.service.create({
      data: {
        ...data,

        event: data.event
          ? {
              connect: data.event,
            }
          : undefined,

        post: data.post
          ? {
              connect: data.post,
            }
          : undefined,
        publicationsOnCommunities:
          data.publicationsOnCommunities &&
          data.publicationsOnCommunities.length > 0
            ? {
                createMany: {
                  data: data.publicationsOnCommunities.map((e) => {
                    return { communityId: e };
                  }),
                },
              }
            : undefined,

        offer: data.offer
          ? {
              create: {
                ...data.offer,
                contract: data.offer.contract && data.offer.contract.id 
                  ? { connect: data.offer.contract }
                  : undefined,
                offersOnCommunities:
                  data.publicationsOnCommunities &&
                  data.publicationsOnCommunities.length > 0
                    ? {
                        createMany: {
                          data: data.publicationsOnCommunities.map((e) => {
                            return { communityId: e };
                          }),
                        },
                      }
                    : undefined,
                questions:
                  data.offer.questions && data.offer.questions.length > 0
                    ? {
                        create: data.offer.questions.map((e) => {
                          return {
                            ...e,
                            video: e.video
                              ? {
                                  connectOrCreate: {
                                    where: { id: e.video.id || "" },
                                    create: {
                                      ...e.video,
                                      id: undefined,
                                      publication: e.video.publication
                                        ? { connect: e.video.publication }
                                        : undefined,
                                    },
                                  },
                                }
                              : undefined,
                          };
                        }),
                      }
                    : undefined,
              },
            }
          : undefined,
        story: data.story
          ? {
              create: data.story,
            }
          : undefined,

        video: data.video
          ? {
              connect: data.video,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        type: true,
        title: true,
        description: true,

        event: {
          select: {
            id: true,
          },
        },

        post: {
          select: {
            id: true,
          },
        },

        offer: {
          select: {
            id: true,
            questions: {
              select: {
                id: true,
                videoId: true,
              },
            },
          },
        },

        story: {
          select: {
            id: true,
          },
        },

        video: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get()
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: getListPublicationDto })
  @swagger.ApiForbiddenResponse()
  @swagger.ApiQuery({
    type: () => PublicationFindManyArgs,
    style: "deepObject",
    explode: true,
  })
  async findMany(
    @common.Req() request: Request,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<PaginatedInterface<Publication>> {
    const args = plainToClass(PublicationFindManyArgs, request.query);

    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Publication",
    });
    const results = await this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        type: true,
        title: true,
        description: true,

        event: {
          select: {
            id: true,
          },
        },

        post: {
          select: {
            id: true,
          },
        },

        offer: {
          select: {
            id: true,
          },
        },

        story: {
          select: {
            id: true,
          },
        },

        video: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    const result = results.paginatedResult.map((result: Publication) =>
      permission.filter(result)
    );
    return { paginatedResult: result, totalCount: results.totalCount };
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id")
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "own",
  })
  @swagger.ApiOkResponse({ type: Publication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: PublicationWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Publication | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Publication",
    });
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        type: true,
        title: true,
        description: true,

        event: {
          select: {
            id: true,
          },
        },

        post: {
          select: {
            id: true,
          },
        },
        offer: {
          select:{
            contract : {
              select:{
                id:true
              },
            },
            questions:{
              select:{
                id:true,
                title:true,
                description:true,
                video:true,
              }
            },
            renumeration:true,
            place:true,
            candidateMaxNumber:true,
            offerType:true,
            experienceLevel:true,
            offerMode:true,
            isActive:true,
          },
          
        },
        publicationsOnCommunities : {
          select:{
            communityId:true
          }
        },
        story: {
          select: {
            id: true,
            mediaLink:true,
          },
        },

        video: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return permission.filter(result);
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id")
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "update",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: Publication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: PublicationWhereUniqueInput,
    @common.Body()
    data: PublicationUpdateInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Publication | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Publication",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Publication"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          event: data.event
            ? {
                connect: data.event,
              }
            : undefined,

          post: data.post
            ? {
                connect: data.post,
              }
            : undefined,

          publicationsOnCommunities:
            data.publicationsOnCommunities 
              ? {
                  deleteMany: {
                    publicationId: params.id,
                  },
                  createMany: {
                    data: data.publicationsOnCommunities.map((e) => {
                      return { communityId: e };
                    }),
                  },
                }
              : undefined,

          offer: data.offer
            ? {
                update: {
                  ...data.offer,
                  contract: data.offer.contract && data.offer.contract.id
                    ? { connect: data.offer.contract }
                    : undefined,
                  offersOnCommunities:
                    data.publicationsOnCommunities
                      ? {
                          deleteMany: {
                            offerId: data.offer.id,
                          },
                          createMany: {
                            data: data.publicationsOnCommunities.map((e) => {
                              return { communityId: e };
                            }),
                          },
                        }
                      : undefined,
                  questions:
                    data.offer.questions && data.offer.questions.length > 0
                      ? {
                          upsert: data.offer.questions.map((e) => {
                            return {
                              update: {
                                ...e,
                                questionType: e.questionType
                                  ? { connect: e.questionType }
                                  : undefined,
                                video: e.video
                                  ? {
                                      connectOrCreate: {
                                        where: { id: e.video.id || "" },
                                        create: {
                                          ...e.video,
                                          id: undefined,
                                          publication: e.video.publication
                                            ? { connect: e.video.publication }
                                            : undefined,
                                          category: e.video.category
                                            ? { connect: e.video.category }
                                            : undefined,
                                          entreprise: e.video.entreprise
                                            ? { connect: e.video.entreprise }
                                            : undefined,
                                        },
                                      },
                                    }
                                  : undefined,
                              },
                              create: {
                                ...e,
                                questionType: e.questionType
                                  ? { connect: e.questionType }
                                  : undefined,
                                video: e.video
                                  ? {
                                      connectOrCreate: {
                                        where: { id: e.video.id || "" },
                                        create: {
                                          ...e.video,
                                          id: undefined,
                                          publication: e.video.publication
                                            ? { connect: e.video.publication }
                                            : undefined,
                                          category: e.video.category
                                            ? { connect: e.video.category }
                                            : undefined,
                                          entreprise: e.video.entreprise
                                            ? { connect: e.video.entreprise }
                                            : undefined,
                                        },
                                      },
                                    }
                                  : undefined,
                              },
                              where: {
                                id: e.id || "",
                              },
                            };
                          }),
                        }
                      : undefined,
                },
              }
            : undefined,
          story: data.story
            ? {
                update: data.story,
              }
            : undefined,

          video: data.video
            ? {
                connect: data.video,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          type: true,
          title: true,
          description: true,

          event: {
            select: {
              id: true,
            },
          },

          post: {
            select: {
              id: true,
            },
          },

          offer: {
            select: {
              id: true,
            },
          },

          story: {
            select: {
              id: true,
            },
          },

          video: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id")
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: Publication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: PublicationWhereUniqueInput,
    @common.Body() data: PublicationUpdateInput,
  ) : Promise<Publication | null>  {
    try {
      return await this.service.delete({
        where: params,
        data: {
          deletedAt: new Date(),
          publicationsOnCommunities:{
            updateMany:{
              where:{
                publicationId:{
                  equals: params.id
                }
              },
              data:{deletedAt: new Date()}
            }
          },
          offer: data.type==='offer'
          ?{
            update: {
              deletedAt: new Date(),
              offersOnCommunities:{
                updateMany: {data: {deletedAt: new Date()} , where:{}}
              },
              questions:{
                updateMany: {
                  data: {deletedAt : new Date()}, where:{}
                }
              }
            }
          }: undefined,
          story: data.type==='story'
          ?{
            update:{
              deletedAt: new Date()
            }
          }: undefined,
          event: data.type==='event'
          ?{
            update:{
              deletedAt: new Date()
            }
          }: undefined,
          post: data.type==='post'
          ?{
            update:{
              deletedAt: new Date()
            }
          }: undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          type: true,
          title: true,
          description: true,

          event: {
            select: {
              id: true,
            },
          },

          post: {
            select: {
              id: true,
            },
          },

          offer: {
            select: {
              id: true,
            },
          },

          story: {
            select: {
              id: true,
              deletedAt:true,
            },
          },

          video: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/publicationsOnCommunities")
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => PublicationsOnCommunityWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyPublicationsOnCommunities(
    @common.Req() request: Request,
    @common.Param() params: PublicationWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<PublicationsOnCommunity[]> {
    const query: PublicationsOnCommunityWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "PublicationsOnCommunity",
    });
    const results = await this.service.findPublicationsOnCommunities(
      params.id,
      {
        where: query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          publication: {
            select: {
              id: true,
            },
          },

          community: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/publicationsOnCommunities")
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "update",
    possession: "any",
  })
  async createPublicationsOnCommunities(
    @common.Param() params: PublicationWhereUniqueInput,
    @common.Body() body: PublicationWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      publicationsOnCommunities: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Publication",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Publication"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/publicationsOnCommunities")
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "update",
    possession: "any",
  })
  async updatePublicationsOnCommunities(
    @common.Param() params: PublicationWhereUniqueInput,
    @common.Body() body: PublicationWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      publicationsOnCommunities: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Publication",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Publication"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/publicationsOnCommunities")
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "update",
    possession: "any",
  })
  async deletePublicationsOnCommunities(
    @common.Param() params: PublicationWhereUniqueInput,
    @common.Body() body: PublicationWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      publicationsOnCommunities: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Publication",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Publication"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/socialinterractions")
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => SocialinterractionWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManySocialinterractions(
    @common.Req() request: Request,
    @common.Param() params: PublicationWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Socialinterraction[]> {
    const query: SocialinterractionWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Socialinterraction",
    });
    const results = await this.service.findSocialinterractions(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        type: true,

        publication: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/socialinterractions")
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "update",
    possession: "any",
  })
  async createSocialinterractions(
    @common.Param() params: PublicationWhereUniqueInput,
    @common.Body() body: PublicationWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      socialinterractions: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Publication",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Publication"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/socialinterractions")
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "update",
    possession: "any",
  })
  async updateSocialinterractions(
    @common.Param() params: PublicationWhereUniqueInput,
    @common.Body() body: PublicationWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      socialinterractions: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Publication",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Publication"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/socialinterractions")
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "update",
    possession: "any",
  })
  async deleteSocialinterractions(
    @common.Param() params: PublicationWhereUniqueInput,
    @common.Body() body: PublicationWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      socialinterractions: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Publication",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Publication"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
