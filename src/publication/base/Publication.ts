/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsDate, IsOptional, ValidateNested , IsEnum} from "class-validator";
import { Type } from "class-transformer";
import { PublicationsOnCommunity } from "../../publicationsOnCommunity/base/PublicationsOnCommunity";
import { Event } from "../../event/base/Event";
import { Post } from "../../post/base/Post";
import { Offer } from "../../offer/base/Offer";
import { Story } from "../../story/base/Story";
import { Video } from "../../video/base/Video";
import { Socialinterraction } from "../../socialinterraction/base/Socialinterraction";
import { User } from "../../user/base/User";
import { EnumTypePub } from "src/auth/registerEnumType";
@ObjectType()
class Publication {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  @IsOptional()
updatedAt?: Date | null;

  // @ApiProperty({
  //   required: false,
  //   type: String,
  // })
  // @IsString()
  // @IsOptional()
  // @Field(() => String, {
  //   nullable: true,
  // })
  // type!: string | null;
  @ApiProperty({
    required: true,
    enum: EnumTypePub,
  })
  @IsEnum(EnumTypePub)
  @IsOptional()
  @Field(() => EnumTypePub, {
    nullable: false,
  })
  type!: "story" | "event" |  "offer" | "video" | "post" ;

  // @ApiProperty({
  //   required: true,
  //   enum: EnumTypePub,
  // })
  // @IsEnum(EnumTypePub)
  // @Field(() => EnumTypePub, {
  //   nullable: false,
  // })
  // type!: "story" | "event" |  "offer" | "video" ;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  title!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: false,
    type: () => [PublicationsOnCommunity],
  })
  @ValidateNested()
  @Type(() => PublicationsOnCommunity)
  @IsOptional()
  publicationsOnCommunities?: Array<PublicationsOnCommunity>;

  @ApiProperty({
    required: false,
    type: () => Event,
  })
  @ValidateNested()
  @Type(() => Event)
  @IsOptional()
  event?: Event | null;

  @ApiProperty({
    required: false,
    type: () => Post,
  })
  @ValidateNested()
  @Type(() => Post)
  @IsOptional()
  post?: Post | null;

  @ApiProperty({
    required: false,
    type: () => Offer,
  })
  @ValidateNested()
  @Type(() => Offer)
  @IsOptional()
  offer?: Offer | null;

  @ApiProperty({
    required: false,
    type: () => Story,
  })
  @ValidateNested()
  @Type(() => Story)
  @IsOptional()
  story?: Story | null;

  @ApiProperty({
    required: false,
    type: () => Video,
  })
  @ValidateNested()
  @Type(() => Video)
  @IsOptional()
  video?: Video | null;

  @ApiProperty({
    required: false,
    type: () => [Socialinterraction],
  })
  @ValidateNested()
  @Type(() => Socialinterraction)
  @IsOptional()
  socialinterractions?: Array<Socialinterraction>;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  user?: User | null;
}
export { Publication };
