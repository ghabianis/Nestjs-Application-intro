/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { CreatePublicationArgs } from "./CreatePublicationArgs";
import { UpdatePublicationArgs } from "./UpdatePublicationArgs";
import { DeletePublicationArgs } from "./DeletePublicationArgs";
import { PublicationFindManyArgs } from "./PublicationFindManyArgs";
import { PublicationFindUniqueArgs } from "./PublicationFindUniqueArgs";
import { Publication } from "./Publication";
import { PublicationsOnCommunityFindManyArgs } from "../../publicationsOnCommunity/base/PublicationsOnCommunityFindManyArgs";
import { PublicationsOnCommunity } from "../../publicationsOnCommunity/base/PublicationsOnCommunity";
import { SocialinterractionFindManyArgs } from "../../socialinterraction/base/SocialinterractionFindManyArgs";
import { Socialinterraction } from "../../socialinterraction/base/Socialinterraction";
import { Event } from "../../event/base/Event";
import { Post } from "../../post/base/Post";
import { Offer } from "../../offer/base/Offer";
import { Story } from "../../story/base/Story";
import { Video } from "../../video/base/Video";
import { User } from "../../user/base/User";
import { PublicationService } from "../publication.service";

@graphql.Resolver(() => Publication)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PublicationResolverBase {
  constructor(
    protected readonly service: PublicationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "any",
  })
  // async _publicationsMeta(
  //   @graphql.Args() args: PublicationFindManyArgs
  // ): Promise<MetaQueryPayload> {
  //   const results = await this.service.count({
  //     ...args,
  //     skip: undefined,
  //     take: undefined,
  //   });
  //   return {
  //     count: results,
  //   };
  // }

  // @graphql.Query(() => [Publication])
  // @nestAccessControl.UseRoles({
  //   resource: "Publication",
  //   action: "read",
  //   possession: "any",
  // })
  // async publications(
  //   @graphql.Args() args: PublicationFindManyArgs,
  //   @gqlUserRoles.UserRoles() userRoles: string[]
  // ): Promise<PaginatedInterface<Publication>> {
  //   const permission = this.rolesBuilder.permission({
  //     role: userRoles,
  //     action: "read",
  //     possession: "any",
  //     resource: "Publication",
  //   });
  //   const results = await this.service.findMany(args);
  //   const result = results.paginatedResult.map((result: Publication) =>
  //     permission.filter(result)
  //   );
  //   return { paginatedResult: result, totalCount: results.totalCount };
  // }

  @graphql.Query(() => Publication, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "own",
  })
  async publication(
    @graphql.Args() args: PublicationFindUniqueArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Publication | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Publication",
    });
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.Mutation(() => Publication)
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "create",
    possession: "any",
  })
  async createPublication(
    @graphql.Args() args: CreatePublicationArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Publication> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Publication",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Publication"} creation is forbidden for roles: ${roles}`
      );
    }
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,

        post: args.data.post
          ? {
              connect: args.data.post,
            }
          : undefined,
        publicationsOnCommunities:
          args.data.publicationsOnCommunities &&
          args.data.publicationsOnCommunities.length > 0
            ? {
                createMany: {
                  data: args.data.publicationsOnCommunities.map((e) => {
                    return { communityId: e };
                  }),
                },
              }
            : undefined,

        offer: args.data.offer
          ? {
              create: {
                ...args.data.offer,
                contract: args.data.offer.contract && args.data.offer.contract.id
                  ? { connect: args.data.offer.contract }
                  : undefined,
                offersOnCommunities:
                  args.data.publicationsOnCommunities &&
                  args.data.publicationsOnCommunities.length > 0
                    ? {
                        createMany: {
                          data: args.data.publicationsOnCommunities.map((e) => {
                            return { communityId: e };
                          }),
                        },
                      }
                    : undefined,
                questions:
                  args.data.offer.questions &&
                  args.data.offer.questions.length > 0
                    ? {
                        create: args.data.offer.questions.map((e) => {
                          return {
                            ...e,
                            video: e.video
                              ? {
                                  connectOrCreate: {
                                    where: { id: e.video.id || "" },
                                    create: {
                                      ...e.video,
                                      id: undefined,
                                      publication: e.video.publication
                                        ? { connect: e.video.publication }
                                        : undefined,
                                    },
                                  },
                                }
                              : undefined,
                          };
                        }),
                      }
                    : undefined,
              },
            }
          : undefined,
        story: args.data.story
          ? {
              create: args.data.story,
            }
          : undefined,

        video: args.data.video
          ? {
              connect: args.data.video,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Publication)
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "update",
    possession: "any",
  })
  async updatePublication(
    @graphql.Args() args: UpdatePublicationArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Publication | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Publication",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Publication"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,

          post: args.data.post
            ? {
                connect: args.data.post,
              }
            : undefined,
            publicationsOnCommunities:
            args.data.publicationsOnCommunities &&
            args.data.publicationsOnCommunities.length > 0
              ? {
                  deleteMany: args.where,
                  createMany: {
                    data: args.data.publicationsOnCommunities.map((e) => {
                      return { communityId: e };
                    }),
                  },
                }
              : undefined,

          offer: args.data.offer
            ? {
                update: {
                  ...args.data.offer,
                  contract: args.data.offer.contract && args.data.offer.contract.id
                  ? { connect: args.data.offer.contract }
                    : undefined,
                  offersOnCommunities:
                  args.data.publicationsOnCommunities &&
                  args.data.publicationsOnCommunities.length > 0
                      ? {
                          deleteMany: {
                            offerId: args.data.offer.id,
                          },
                          createMany: {
                            data: args.data.publicationsOnCommunities.map((e) => {
                              return { communityId: e };
                            }),
                          },
                        }
                      : undefined,
                  questions:
                  args.data.offer.questions && args.data.offer.questions.length > 0
                      ? {
                          upsert: args.data.offer.questions.map((e) => {
                            return {
                              update: {
                                ...e,
                                questionType: e.questionType
                                  ? { connect: e.questionType }
                                  : undefined,
                                video: e.video
                                  ? {
                                      connectOrCreate: {
                                        where: { id: e.video.id || "" },
                                        create: {
                                          ...e.video,
                                          id: undefined,
                                          publication: e.video.publication
                                            ? { connect: e.video.publication }
                                            : undefined,
                                          category: e.video.category
                                            ? { connect: e.video.category }
                                            : undefined,
                                          entreprise: e.video.entreprise
                                            ? { connect: e.video.entreprise }
                                            : undefined,
                                        },
                                      },
                                    }
                                  : undefined,
                              },
                              create: {
                                ...e,
                                questionType: e.questionType
                                  ? { connect: e.questionType }
                                  : undefined,
                                video: e.video
                                  ? {
                                      connectOrCreate: {
                                        where: { id: e.video.id || "" },
                                        create: {
                                          ...e.video,
                                          id: undefined,
                                          publication: e.video.publication
                                            ? { connect: e.video.publication }
                                            : undefined,
                                          category: e.video.category
                                            ? { connect: e.video.category }
                                            : undefined,
                                          entreprise: e.video.entreprise
                                            ? { connect: e.video.entreprise }
                                            : undefined,
                                        },
                                      },
                                    }
                                  : undefined,
                              },
                              where: {
                                id: e.id || "",
                              },
                            };
                          }),
                        }
                      : undefined,
                },
              }
            : undefined,

          story: args.data.story
            ? {
                connect: args.data.story,
              }
            : undefined,

          video: args.data.video
            ? {
                connect: args.data.video,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Publication)
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "delete",
    possession: "any",
  })
  async deletePublication(
    @graphql.Args() args: UpdatePublicationArgs
  ): Promise<Publication | null> {
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        where:args.where,
        data:{
          deletedAt: new Date(),
          publicationsOnCommunities:{
            updateMany:{
              where:{publicationId:args.where.id},
              data:{deletedAt: new Date()}
            }
          },
          offer:{
            update: {deletedAt: new Date(),
              offersOnCommunities:{
                updateMany: {data: {deletedAt: new Date()} , where:{}}
              },
              questions:{
                updateMany: {
                  data: {deletedAt : new Date()}, where:{}
                }
              }
            }},
        }

    });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PublicationsOnCommunity])
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "any",
  })
  async publicationsOnCommunities(
    @graphql.Parent() parent: Publication,
    @graphql.Args() args: PublicationsOnCommunityFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<PublicationsOnCommunity[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "PublicationsOnCommunity",
    });
    const results = await this.service.findPublicationsOnCommunities(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [Socialinterraction])
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "any",
  })
  async socialinterractions(
    @graphql.Parent() parent: Publication,
    @graphql.Args() args: SocialinterractionFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Socialinterraction[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Socialinterraction",
    });
    const results = await this.service.findSocialinterractions(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => Event, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "any",
  })
  async event(
    @graphql.Parent() parent: Publication,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Event | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Event",
    });
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => Post, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "any",
  })
  async post(
    @graphql.Parent() parent: Publication,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Post | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Post",
    });
    const result = await this.service.getPost(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => Offer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "any",
  })
  async offer(
    @graphql.Parent() parent: Publication,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Offer | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Offer",
    });
    const result = await this.service.getOffer(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => Story, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "any",
  })
  async story(
    @graphql.Parent() parent: Publication,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Story | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Story",
    });
    const result = await this.service.getStory(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => Video, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "any",
  })
  async video(
    @graphql.Parent() parent: Publication,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Video | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Video",
    });
    const result = await this.service.getVideo(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Publication",
    action: "read",
    possession: "any",
  })
  async user(
    @graphql.Parent() parent: Publication,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<User | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "User",
    });
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }
}
